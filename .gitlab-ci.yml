# CI configuration.

stages:
  - docker
  - checks
  - reports
  - publish

# build and push docker image. this contains a rust compiler as well as some tooling
# (cargo llvm-cov, cargo hack) used for testing and coverage reporting.
docker:
  stage: docker
  image: docker
  services:
    - docker:dind
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE"
  interruptible: true
  only:
    refs:
      - main
    changes:
      - Dockerfile

# run unit tests
test:
  stage: checks
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just test

# check all feature combinations
features:
  stage: checks
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just features

# run cargo clippy
style:
  stage: checks
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just style

# run unit tests
book-test:
  stage: checks
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just book-test

# build documentation
docs:
  stage: reports
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just docs
  artifacts:
    paths:
      - target/doc

# build book
book:
  stage: reports
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just book
  artifacts:
    paths:
      - target/book

# build coverage.
coverage:
  stage: reports
  image: $CI_REGISTRY_IMAGE
  interruptible: true
  script:
    - just coverage
  artifacts:
    paths:
      - target/llvm-cov/html

pages:
  stage: publish
  image: alpine
  dependencies:
    - docs
    - coverage
    - book
  script:
    - mv target/book public
    - mv target/doc public/rustdoc
    - mv target/llvm-cov/html public/coverage
  artifacts:
    paths:
      - public
  only:
    - main

